/*
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere. 
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Case : Case specifies the expected case for strings and hashes. 
/// Case specifies the expected case for strings and hashes. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Case {
    #[serde(rename = "upper_case")]
    UpperCase,
    #[serde(rename = "lower_case")]
    LowerCase,
    #[serde(rename = "case_sensitive")]
    CaseSensitive,
    #[serde(rename = "null")]
    Null,

}

impl std::fmt::Display for Case {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::UpperCase => write!(f, "upper_case"),
            Self::LowerCase => write!(f, "lower_case"),
            Self::CaseSensitive => write!(f, "case_sensitive"),
            Self::Null => write!(f, "null"),
        }
    }
}

impl Default for Case {
    fn default() -> Case {
        Self::UpperCase
    }
}

